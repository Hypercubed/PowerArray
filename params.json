{"name":"Powerarray","tagline":"Boosted Performance Array","body":"# PowerArray\r\n\r\nTurns out that you can re-write some of the methods of Array to obtain a much better performance than the native methods.\r\nIn particular, Array.forEach seems to perform pretty badly.\r\n\r\nIt looks as if a for loop with cached length is the fastest way of iterating.\r\n```javascript\r\nvar i, len = array.length;\r\nfor (i = 0; i < len; i += 1) {\r\n  someFun(array[len]);\r\n}\r\n```\r\n\r\nSo I rewrote the Array class as PowerArray and implemented the above mechanism in PowerArray.forEach with surprising results.\r\n\r\nThe results are as follows:\r\nPowerArray.forEach is averagely 5~10,000 times faster than native Array.\r\nPowerArray.forEach is averagely 700 times faster than a plain for loop.\r\nPowerArray.map is averagely more than 10,000 times faster than Array.map\r\n\r\nThis is only a proof of concept, future steps are re-creating Harmony 6 methods that depend on loops to improve speed.\r\n\r\nInstall with `npm install powerarray`\r\n\r\n## Proposed Usage\r\n\r\nParticularly useful for arrays that need processing on all elements often, or for numeric arrays utilized as indexes for Collections of data.\r\n\r\n## Methods\r\n\r\nAll Array native methods are available through PowerArray. The following methods are either extending or overriding the native Array class.\r\n\r\n`PowerArray.forEach`: utilizes a for loop for iteration, takes a callback which receives an element and the index of that element.\r\n\r\n`PowerArray.map`: utilizes a for loop to return a PowerArray of mapped values, takes a callback processing function argument.\r\n\r\n`PowerArray.binarySearch`: performs a binary search on the elements of the array, only relevant if the array only consists of numbers. Thanks to [Oliver Caldwell's post](http://oli.me.uk/2013/06/08/searching-javascript-arrays-with-a-binary-search/) for a quick version of the algorithm. Also note the contribution of Yehonatan and other authors of comments to the post which helped to optimise the implementation of binary search further. \r\n\r\n`PowerArray.numericSort`: sorts array (if array only contains integers), useful for utilizing `binarySearch`.\r\n\r\nThis is a typical output from benchmark.js (over 10,000,000 size arrays)\r\n\r\n```\r\nArray.forEach complete in 0.531276637, ops/s: 1.8822585642891727e+7\r\nFor loop complete in 0.033897401, ops/s: 2.950078680073437e+8\r\nSuppedArray complete in 0.000090165, ops/s: 1.1090778018077968e+11\r\n---------------------------------------------------------------------------------\r\nSupped/ forEach ratio: 5892.271247157988\r\n---------------------------------------------------------------------------------\r\nSupped/ for-loop ratio: 375.9485498807741\r\n---------------------------------------------------------------------------------\r\n\r\n\r\n-------------\r\nMAP benchmark\r\n-------------\r\nPlain Array MAP\r\nSuppedArray MAP\r\n\r\nPlain Array MAP complete in 1.09191071, ops/s: 9.158258004448e+6\r\n---------------------------------------------------------------------------------\r\nSupped/Plain Ratio: 10292.40\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}